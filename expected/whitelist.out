--
-- whitelist engine tests
--
-- 
-- set to whitelist engine
--
ALTER SYSTEM SET sql_firewall.engine    TO whitelist;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.engine', 'whitelist');
 wait_be_set 
-------------
           0
(1 row)

SHOW sql_firewall.engine;
 sql_firewall.engine 
---------------------
 whitelist
(1 row)

--
-- prepare test table and its tuples
--
CREATE TABLE employee(id int, gender char, name text, age int);
INSERT INTO employee(id, gender, name, age) VALUES (1, 'f', 'Bai Cai',     16), 
       	    		 	       	    	   (2, 'm', 'Cheng Cheng', 20),
						   (3, 'm', 'Cai Lei',     23);
SELECT * FROM employee;
 id | gender |    name     | age 
----+--------+-------------+-----
  1 | f      | Bai Cai     |  16
  2 | m      | Cheng Cheng |  20
  3 | m      | Cai Lei     |  23
(3 rows)

ALTER SYSTEM SET sql_firewall.firewall TO    disabled;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.firewall', 'disabled');
 wait_be_set 
-------------
           0
(1 row)

SHOW sql_firewall.firewall;
 sql_firewall.firewall 
-----------------------
 disabled
(1 row)

SELECT sql_firewall_reset();
 sql_firewall_reset 
--------------------
 
(1 row)

--------------------------------------------------------------------------------
--
-- testcase:
--   learned whitelist rules allow us to query our 'employee' table with a
--   predicate and turn back to disabled mode from enforcing mode.
--
--------------------------------------------------------------------------------
ALTER SYSTEM SET sql_firewall.firewall TO    learning;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.firewall', 'learning');
 wait_be_set 
-------------
           0
(1 row)

-- learning pg_reload_conf() function as whitelist rule entry
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.firewall', 'learning');
 wait_be_set 
-------------
           0
(1 row)

SHOW sql_firewall.firewall;
 sql_firewall.firewall 
-----------------------
 learning
(1 row)

SELECT * FROM employee WHERE id = 1;
 id | gender |  name   | age 
----+--------+---------+-----
  1 | f      | Bai Cai |  16
(1 row)

ALTER SYSTEM SET sql_firewall.firewall TO    disabled;
SELECT * FROM sql_firewall.whitelist WHERE query NOT LIKE '%pg_sleep%';
 userid |  queryid   |                            query                             | calls 
--------+------------+--------------------------------------------------------------+-------
     10 | 3459310925 | SELECT * FROM employee WHERE id = ?;                         |     0
     10 | 1750906930 | SELECT * FROM sql_firewall.whitelist WHERE query NOT LIKE ?; |     0
     10 | 3407341580 | ALTER SYSTEM SET sql_firewall.firewall TO    disabled;       |     0
     10 | 2128089821 | SELECT wait_be_set(?, ?);                                    |     0
     10 |  167207106 | SHOW sql_firewall.firewall;                                  |     0
     10 | 1378796334 | SELECT pg_reload_conf();                                     |     0
(6 rows)

--
-- the following whitelist rules should be properly configured here before
-- we test our whitelist rule engine, if this does not hold we would not be
-- able to disable the firewall of 'enforcing' mode at all, and then we
-- would not be able to do our rest tests.
--
ALTER SYSTEM SET sql_firewall.firewall TO    disabled;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.firewall', 'disabled');
 wait_be_set 
-------------
           0
(1 row)

SHOW sql_firewall.firewall;
 sql_firewall.firewall 
-----------------------
 disabled
(1 row)

-- pg_sleep is radomly called so we ignore it here.
SELECT * FROM sql_firewall.whitelist WHERE query NOT LIKE '%pg_sleep%';
 userid |  queryid   |                            query                             | calls 
--------+------------+--------------------------------------------------------------+-------
     10 | 3459310925 | SELECT * FROM employee WHERE id = ?;                         |     0
     10 | 1750906930 | SELECT * FROM sql_firewall.whitelist WHERE query NOT LIKE ?; |     0
     10 | 3407341580 | ALTER SYSTEM SET sql_firewall.firewall TO    disabled;       |     0
     10 | 2128089821 | SELECT wait_be_set(?, ?);                                    |     0
     10 |  167207106 | SHOW sql_firewall.firewall;                                  |     0
     10 | 1378796334 | SELECT pg_reload_conf();                                     |     0
(6 rows)

--
-- this query would introduce a whitelist rule for 'employee'.
--
SELECT * FROM employee WHERE id = 1;
 id | gender |  name   | age 
----+--------+---------+-----
  1 | f      | Bai Cai |  16
(1 row)

--
-- verify the settings of sql_firewall have been properly set.
--
SHOW sql_firewall.firewall;
 sql_firewall.firewall 
-----------------------
 disabled
(1 row)

SHOW sql_firewall.max;
 sql_firewall.max 
------------------
 5000
(1 row)

SHOW sql_firewall.engine;
 sql_firewall.engine 
---------------------
 whitelist
(1 row)

--------------------------------------------------------------------------------
--
-- testcase
--   add a whitelist rule of table 'employee', and it would permit our query
--   as expected
--
--------------------------------------------------------------------------------
--
-- allowed query rule for 'employee'
--
SELECT sql_firewall.add_rule('postgres', 'UPDATE employee SET age = age + 1;', 'whitelist');
 add_rule 
----------
 t
(1 row)

ALTER SYSTEM SET sql_firewall.firewall TO enforcing;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.firewall', 'enforcing');
 wait_be_set 
-------------
           0
(1 row)

SHOW sql_firewall.firewall;
 sql_firewall.firewall 
-----------------------
 enforcing
(1 row)

						
--
-- confirm the rules of configured rules would prohibit queries as expected.
--
SELECT * FROM sql_firewall.whitelist WHERE query NOT LIKE '%pg_sleep%';
 userid |  queryid   |                            query                             | calls 
--------+------------+--------------------------------------------------------------+-------
     10 | 1877630178 | UPDATE employee SET age = age + ?;                           |     0
     10 | 3459310925 | SELECT * FROM employee WHERE id = ?;                         |     0
     10 | 1750906930 | SELECT * FROM sql_firewall.whitelist WHERE query NOT LIKE ?; |     1
     10 | 3407341580 | ALTER SYSTEM SET sql_firewall.firewall TO    disabled;       |     0
     10 | 2128089821 | SELECT wait_be_set(?, ?);                                    |     2
     10 |  167207106 | SHOW sql_firewall.firewall;                                  |     1
     10 | 1378796334 | SELECT pg_reload_conf();                                     |     0
(7 rows)

--
-- verify the whitelist rule permit our query
--
SELECT * FROM employee WHERE id = 1;
 id | gender |  name   | age 
----+--------+---------+-----
  1 | f      | Bai Cai |  16
(1 row)

UPDATE employee SET age = age + 2;
DELETE   FROM employee WHERE id = 1;
ERROR:  Prohibited SQL statement - sql firewall violation
HINT:  SQL statement : DELETE   FROM employee WHERE id = 1;
SELECT * FROM employee WHERE id = 1;
 id | gender |  name   | age 
----+--------+---------+-----
  1 | f      | Bai Cai |  18
(1 row)

--
-- this query is not allowed according to the whitelist rules, so it should failed
--
SELECT * FROM employee;
ERROR:  Prohibited SQL statement - sql firewall violation
HINT:  SQL statement : SELECT * FROM employee;
ALTER SYSTEM SET sql_firewall.firewall TO    disabled;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

SELECT wait_be_set('sql_firewall.firewall', 'disabled');
 wait_be_set 
-------------
           0
(1 row)

SHOW sql_firewall.firewall;
 sql_firewall.firewall 
-----------------------
 disabled
(1 row)

--
-- both query would be permitted as we have disabled the sql_firewall
--
SELECT * FROM employee;
 id | gender |    name     | age 
----+--------+-------------+-----
  1 | f      | Bai Cai     |  18
  2 | m      | Cheng Cheng |  22
  3 | m      | Cai Lei     |  25
(3 rows)

SELECT * FROM employee WHERE id = 1;
 id | gender |  name   | age 
----+--------+---------+-----
  1 | f      | Bai Cai |  18
(1 row)

--
-- teardown
--
DROP TABLE employee;
